"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import logging.config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()
env.read_env(os.path.join(BASE_DIR, 'env.txt'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = '@v6x^(zc3g4mo-$kky#1s5jh02gr=!a*ob^2bw7v5ry*_1=&gw'
SECRET_KEY = env.get_value('SECRET_KEY', str)

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = env.bool('DEBUG', default=False)

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = env.get_value('ALLOWED_HOSTS', list)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'ipv4',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# STATIC_ROOT = '/home/user1/www/nginx_icm/data/html/static'
STATIC_ROOT = env.get_value('STATIC_ROOT', str)

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.TokenAuthentication',
    # ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
}

LOGIN_URL = '/api-auth/login'
LOGOUT_URL = '/api-auth/logout'
# LOGIN_REDIRECT_URL = 'ical:ical_index'
LOGOUT_REDIRECT_URL = '/api-auth/login'

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    # formatters
    'formatters': {
        'customFormat': {
            'format': '\t[%(levelname)s:%(name)s] %(message)s'
        },
        'fileLogFormat': {
            'format': '[%(levelname)s] %(asctime)s %(process)d-%(thread)d '
                      '%(message)s (%(filename)s:%(lineno)d)'
        },
        'fileLogFormatP': {
            'format': '[%(levelname)s] %(asctime)s %(process)d '
                      '%(message)s (%(filename)s:%(lineno)d)'
        },
        'default': {
            'format': '%(asctime)s : %(levelname)s : %(name)s : %(message)s'
        },
    },
    # handler
    'handlers': {
        'customStreamHandler': {
            'class': 'logging.StreamHandler',
            'formatter': 'customFormat',
            'level': 'DEBUG'
        },
        # 'file': {
        #     'level': logging.DEBUG,
        #     'class': 'logging.handlers.WatchedFileHandler',
        #     'formatter': 'fileLogFormat',
        #     'filename': 'log/ipaddrm.log',
        #     'mode': 'a',
        #     'encoding': 'utf-8',
        # },
        'file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'fileLogFormat',
            'filename': 'log/ipaddrm.log',
            'level': 'DEBUG',
            'when': 'MIDNIGHT',
            'backupCount': 31,
            'encoding': 'utf-8',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
            'level': 'DEBUG'
        },
    },
    # logger target list
    'root': {
        'handlers': ['file'],
    },
})

# ICAL_QUERY_SET_LIMIT = 100
# LOGM_QUERY_SET_LIMIT = env.get_value('LOGM_QUERY_SET_LIMIT', int)
# API_QUERY_SET_LIMIT = 100
# API_QUERY_SET_LIMIT = env.get_value('API_QUERY_SET_LIMIT', int)
